// services/pdfGenerator.service.js
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const QRCode = require('qrcode');

class PDFGeneratorService {
  // Add logo to PDF
  static addLogo(doc, x, y, size = 40) {
    try {
      // Path from services folder to public folder
      const logoPath = path.join(__dirname, '../public/logo-title.png');
      if (fs.existsSync(logoPath)) {
        doc.image(logoPath, x, y, { width: size });
      } else {
        // Fallback: Create circular logo with 'L'
        doc.circle(x + size/2, y + size/2, size/2)
           .fillColor('#22c55e')
           .fill()
           .fillColor('white')
           .fontSize(size/2)
           .text('L', x + size/3, y + size/3)
           .fillColor('black');
      }
    } catch (error) {
      // Fallback logo
      doc.circle(x + size/2, y + size/2, size/2)
         .fillColor('#22c55e')
         .fill()
         .fillColor('white')
         .fontSize(size/2)
         .text('L', x + size/3, y + size/3)
         .fillColor('black');
    }
  }

  // Generate QR Code for invoice download URL
  static async generateDownloadQRCode(order) {
    const downloadUrl = `http://localhost:3000/api/download-invoice/${order.orderNumber}`;
    return await QRCode.toBuffer(downloadUrl, { 
      width: 100,
      margin: 1,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });
  }

  // Generate Order Confirmation PDF Buffer (Updated - No borders, light gray table background)
  static async generateOrderConfirmationPDFBuffer(order, items) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 50 });
        const chunks = [];

        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => {
          const buffer = Buffer.concat(chunks);
          resolve(buffer);
        });
        doc.on('error', reject);

        // Logo and title
        this.addLogo(doc, 50, 50, 40);
        doc.fontSize(18)
           .fillColor('#22c55e')
           .text('Online Order Confirmation', 100, 60)
           .fillColor('black');

        // Order Details section
        doc.fontSize(14)
           .fillColor('#22c55e')
           .text('Order Details:', 50, 110)
           .fillColor('black');

        // From section (right aligned)
        doc.fontSize(10)
           .text('From:', 400, 110)
           .text('Your Company Name', 400, 125)
           .text('Contact No: +91-XXX-XXX-XXXX', 400, 140)
           .text('Email: info@company.com', 400, 155)
           .text('Website: www.yourcompany.com', 400, 170);

        // To section (left aligned)
        doc.text('To:', 50, 135)
           .text(`Name: ${order.billingAddress.firstName} ${order.billingAddress.lastName}`, 50, 150)
           .text(`Contact No: ${order.billingAddress.phone || 'N/A'}`, 50, 165)
           .text(`Email: ${order.email || 'N/A'}`, 50, 180)
           .text(`Address: ${order.billingAddress.address}, ${order.billingAddress.city}, ${order.billingAddress.province} ${order.billingAddress.postalCode}`, 50, 195, { width: 300 });

        // Items table
        const tableTop = 230;
        
        // Table header with green background (no gap between header and rows)
        doc.rect(50, tableTop, 495, 30)
           .fillColor('#22c55e')
           .fill();
           
        doc.fillColor('white')
           .fontSize(11)
           .font('Helvetica-Bold')
           .text('S.No', 60, tableTop + 10)
           .text('Item', 100, tableTop + 10)
           .text('Qty', 280, tableTop + 10)
           .text('Unit Price', 320, tableTop + 10)
           .text('Discount', 390, tableTop + 10)
           .text('Total Price', 450, tableTop + 10);

        // Table rows with light gray background (no gaps between rows)
        let yPosition = tableTop + 30;
        
        items.forEach((item, index) => {
          const rowHeight = 45;
          
          // Light gray background for all rows
          doc.rect(50, yPosition, 495, rowHeight)
             .fillColor('#F5F5F5')
             .fill();
          
          const discount = item.discount || 0;
          
          // S.No
          doc.fillColor('black')
             .fontSize(10)
             .font('Helvetica')
             .text((index + 1).toString(), 65, yPosition + 12);
          
          // Item name (bold)
          const itemName = item.name.length > 22 ? item.name.substring(0, 19) + '...' : item.name;
          doc.fontSize(10)
             .fillColor('black')
             .font('Helvetica-Bold')
             .text(itemName, 105, yPosition + 8, { width: 165 });
          
          // Item description (smaller text below name)
          const description = item.description || `${item.name} details`;
          const shortDescription = description.length > 28 ? description.substring(0, 25) + '...' : description;
          doc.fontSize(8)
             .fillColor('#6B7280')
             .font('Helvetica')
             .text(shortDescription, 105, yPosition + 22, { width: 165 });
          
          // Other columns with $ symbols
          doc.fillColor('black')
             .fontSize(10)
             .font('Helvetica')
             .text(item.quantity.toString(), 290, yPosition + 15)
             .text(`$${item.price.toFixed(2)}`, 325, yPosition + 15)
             .text(`$${discount.toFixed(2)}`, 395, yPosition + 15)
             .text(`$${((item.price * item.quantity) - discount).toFixed(2)}`, 455, yPosition + 15);
          
          yPosition += rowHeight;
        });

        // Summary section (right aligned)
        const summaryTop = yPosition + 30;
        
        doc.fontSize(10)
           .text('Sub Total', 400, summaryTop)
           .text(`$${order.orderSummary.subtotal.toFixed(2)}`, 480, summaryTop);

        doc.text('Tax 13%', 400, summaryTop + 20)
           .text(`$${order.orderSummary.tax.toFixed(2)}`, 480, summaryTop + 20);

        // Grand Total with green background
        doc.rect(370, summaryTop + 40, 175, 25)
           .fillColor('#22c55e')
           .fill()
           .fillColor('white')
           .fontSize(12)
           .text('Grand Total', 380, summaryTop + 48)
           .text(`$${order.orderSummary.total.toFixed(2)}`, 480, summaryTop + 48);

        // Note section
        const noteTop = summaryTop + 80;
        doc.fillColor('black')
           .fontSize(10)
           .text('Note:', 50, noteTop)
           .fontSize(9)
           .text(`Should you have any enquiries concerning this confirmation, please contact [NAME] on [NUMBER]`, 50, noteTop + 15, { width: 500 })
           .text('Thanks for your Business!', 50, noteTop + 35);

        // NO BORDER around PDF (removed)

        doc.end();

      } catch (error) {
        reject(error);
      }
    });
  }

  // Generate Invoice PDF Buffer (Updated - No borders, $ symbols, improved layout)
  static async generateInvoicePDFBuffer(order, items) {
    return new Promise(async (resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 40, size: 'A4' });
        const chunks = [];

        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => {
          const buffer = Buffer.concat(chunks);
          resolve(buffer);
        });
        doc.on('error', reject);

        // Generate QR Code for download
        const qrCodeBuffer = await this.generateDownloadQRCode(order);

        // Logo (top left)
        this.addLogo(doc, 40, 40, 60);

        // Company name and details (top right)
        const companyName = order.companyName || 'Your Company Name';
        const companyAddress = order.companyAddress || {
          street: '14B, Northern Street',
          area: 'Greater South Avenue', 
          city: 'New York 10001',
          country: 'U.S.A'
        };

        doc.fontSize(16)
           .fillColor('#22c55e')
           .font('Helvetica-Bold')
           .text(companyName, 300, 40, { align: 'right', width: 195 })
           .fillColor('#666666')
           .fontSize(9)
           .font('Helvetica')
           .text(companyAddress.street, 300, 60, { align: 'right', width: 195 })
           .text(companyAddress.area, 300, 73, { align: 'right', width: 195 })
           .text(companyAddress.city, 300, 86, { align: 'right', width: 195 })
           .text(companyAddress.country, 300, 99, { align: 'right', width: 195 });

        // Horizontal line separator
        doc.moveTo(40, 120)
           .lineTo(555, 120)
           .strokeColor('#CCCCCC')
           .stroke();

        // INVOICE title (centered, no lines)
        const titleY = 130;
        const titleWidth = 515;
        
        doc.fontSize(20)
           .fillColor('#22c55e')
           .font('Helvetica-Bold')
           .text('INVOICE', 40, titleY, { align: 'center', width: titleWidth })
           .fillColor('black')
           .font('Helvetica');

        // Bill To section (left side)
        doc.fontSize(11)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Bill To', 40, 165)
           .fontSize(11)
           .fillColor('#22c55e')
           .text(`${order.billingAddress.firstName} ${order.billingAddress.lastName}`, 40, 180)
           .fillColor('black')
           .fontSize(9)
           .font('Helvetica')
           .text(`${order.billingAddress.address}`, 40, 195)
           .text(`${order.billingAddress.city}`, 40, 208)
           .text(`${order.billingAddress.province} ${order.billingAddress.postalCode}`, 40, 221);

        // Ship To section (left side, below Bill To)
        doc.fontSize(11)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Ship To', 40, 245)
           .fontSize(9)
           .font('Helvetica')
           .text(`${order.shippingAddress?.address || order.billingAddress.address}`, 40, 260)
           .text(`${order.shippingAddress?.city || order.billingAddress.city}`, 40, 273)
           .text(`${order.shippingAddress?.province || order.billingAddress.province} ${order.shippingAddress?.postalCode || order.billingAddress.postalCode}`, 40, 286);

        // Invoice details table (top right)
        const detailsX = 345;
        const detailsY = 165;
        const cellWidth = 85;
        const cellHeight = 22;

        // Invoice# row
        doc.rect(detailsX, detailsY, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .fontSize(9)
           .font('Helvetica-Bold')
           .text('Invoice#', detailsX + 6, detailsY + 7);
        doc.fillColor('black')
           .font('Helvetica')
           .text(`INV-${order.orderNumber}`, detailsX + cellWidth + 6, detailsY + 7);

        // Invoice Date row
        doc.rect(detailsX, detailsY + cellHeight, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Invoice Date', detailsX + 6, detailsY + cellHeight + 7);
        doc.fillColor('black')
           .font('Helvetica')
           .text(new Date(order.createdAt || new Date()).toLocaleDateString('en-CA'), detailsX + cellWidth + 6, detailsY + cellHeight + 7);

        // Terms row
        doc.rect(detailsX, detailsY + cellHeight * 2, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight * 2, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Terms', detailsX + 6, detailsY + cellHeight * 2 + 7);
        doc.fillColor('black')
           .font('Helvetica')
           .text('Due on Receipt', detailsX + cellWidth + 6, detailsY + cellHeight * 2 + 7);

        // Due Date row
        doc.rect(detailsX, detailsY + cellHeight * 3, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight * 3, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Due Date', detailsX + 6, detailsY + cellHeight * 3 + 7);
        doc.fillColor('black')
           .font('Helvetica')
           .text(new Date(order.createdAt || new Date()).toLocaleDateString('en-CA'), detailsX + cellWidth + 6, detailsY + cellHeight * 3 + 7);

        // Items table (no gaps between header and rows)
        const tableTop = 310;
        const tableWidth = 515;
        
        // Table header with green background
        doc.rect(40, tableTop, tableWidth, 30)
           .fillColor('#22c55e')
           .fill();
           
        doc.fillColor('white')
           .fontSize(10)
           .font('Helvetica-Bold')
           .text('#', 50, tableTop + 12)
           .text('Item & Description', 80, tableTop + 12)
           .text('Qty', 350, tableTop + 12, { width: 30, align: 'center' })
           .text('Rate', 390, tableTop + 12, { width: 40, align: 'center' })
           .text('Discount', 440, tableTop + 12, { width: 50, align: 'center' })
           .text('Amount', 500, tableTop + 12, { width: 50, align: 'center' });

        // Table items with light gray background (no gaps between rows)
        let yPos = tableTop + 30;
        const rowHeight = 60;
        
        items.forEach((item, index) => {
          // Light gray background for all rows
          doc.rect(40, yPos, tableWidth, rowHeight)
             .fillColor('#F5F5F5')
             .fill();
          
          doc.fillColor('black')
             .fontSize(9)
             .font('Helvetica')
             .text((index + 1).toString(), 50, yPos + 20);
          
          // Item name (bold)
          const itemName = item.name.length > 25 ? item.name.substring(0, 22) + '...' : item.name;
          doc.fontSize(10)
             .fillColor('black')
             .font('Helvetica-Bold')
             .text(itemName, 80, yPos + 12, { width: 260 });
          
          // Item description/details (smaller text below name)
          const description = item.description || `${item.name} - Product details`;
          const shortDescription = description.length > 40 ? description.substring(0, 37) + '...' : description;
          doc.fontSize(8)
             .fillColor('#6B7280')
             .font('Helvetica')
             .text(shortDescription, 80, yPos + 28, { width: 260 });
          
          // Right aligned numbers with $ symbols and discount
          const discount = item.discount || 0;
          doc.fillColor('black')
             .fontSize(9)
             .font('Helvetica')
             .text(item.quantity.toString(), 350, yPos + 25, { width: 30, align: 'center' })
             .text(`$${item.price.toFixed(2)}`, 390, yPos + 25, { width: 40, align: 'right' })
             .text(`$${discount.toFixed(2)}`, 440, yPos + 25, { width: 50, align: 'right' })
             .text(`$${((item.price * item.quantity) - discount).toFixed(2)}`, 500, yPos + 25, { width: 50, align: 'right' });
          
          yPos += rowHeight;
        });

        // Summary section
        const summaryTop = yPos + 20;
        const summaryX = 350;
        
        // Thank you message (bottom left)
        doc.fontSize(10)
           .fillColor('black')
           .font('Helvetica')
           .text('Thanks for your business.', 40, summaryTop);

        // Sub Total
        doc.fontSize(10)
           .fillColor('black')
           .font('Helvetica')
           .text('Sub Total', summaryX, summaryTop)
           .text(`$${order.orderSummary.subtotal.toFixed(2)}`, summaryX + 110, summaryTop, { width: 60, align: 'right' });

        // Tax Rate
        const taxRate = order.orderSummary.taxRate || 13.00;
        doc.text(`Tax ${taxRate}%`, summaryX, summaryTop + 15)
           .text(`$${order.orderSummary.tax.toFixed(2)}`, summaryX + 110, summaryTop + 15, { width: 60, align: 'right' });

        // Line above Total
        doc.moveTo(summaryX, summaryTop + 30)
           .lineTo(summaryX + 165, summaryTop + 30)
           .strokeColor('#CCCCCC')
           .stroke();

        // Total
        doc.fontSize(12)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Total', summaryX, summaryTop + 40)
           .text(`$${order.orderSummary.total.toFixed(2)}`, summaryX + 110, summaryTop + 40, { width: 60, align: 'right' });

        // Balance Due with green background
        doc.rect(summaryX, summaryTop + 60, 165, 25)
           .fillColor('#22c55e')
           .fill();
        doc.fillColor('white')
           .fontSize(11)
           .font('Helvetica-Bold')
           .text('Balance Due', summaryX + 10, summaryTop + 68)
           .text(`$${order.orderSummary.total.toFixed(2)}`, summaryX + 80, summaryTop + 68, { width: 70, align: 'right' });

        // Terms & Conditions (left side) and QR Code (right side)
        const termsTop = summaryTop + 100;
        
        // QR Code positioned on left side above terms
        if (qrCodeBuffer) {
          doc.image(qrCodeBuffer, 40, termsTop, { width: 80 });
          doc.fontSize(7)
             .fillColor('#666666')
             .text('Scan to download', 40, termsTop + 85, { width: 80, align: 'center' });
        }

        // Terms & Conditions
        doc.fillColor('black')
           .fontSize(10)
           .font('Helvetica-Bold')
           .text('Terms & Conditions', 40, termsTop + 110)
           .fontSize(8)
           .font('Helvetica')
           .text('1. Payment is due within 30 days of invoice date.', 40, termsTop + 125)
           .text('2. Late payments may incur additional charges.', 40, termsTop + 137)
           .text('3. Goods remain property of seller until payment.', 40, termsTop + 149);

        // NO BORDER around PDF (removed)

        doc.end();

      } catch (error) {
        reject(error);
      }
    });
  }

  // Generate Bill PDF Buffer (Updated - No borders, $ symbols, improved layout)
  static async generateBillPDFBuffer(order, items) {
    return new Promise(async (resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 50 });
        const chunks = [];

        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => {
          const buffer = Buffer.concat(chunks);
          resolve(buffer);
        });
        doc.on('error', reject);

        // Generate QR Code for download
        const qrCodeBuffer = await this.generateDownloadQRCode(order);

        // Logo (top left) - circular orange logo with Z
        doc.circle(90, 70, 25)
           .fillColor('#22c55e')
           .fill()
           .fillColor('white')
           .fontSize(20)
           .font('Helvetica-Bold')
           .text('Z', 83, 60)
           .fillColor('black')
           .font('Helvetica');

        // Company name and details (top right)
        doc.fontSize(18)
           .fillColor('#22c55e')
           .font('Helvetica-Bold')
           .text('Zylker Design Labs', 350, 50, { align: 'right', width: 195 })
           .fillColor('#666666')
           .fontSize(9)
           .font('Helvetica')
           .text('14B, Northern Street', 350, 75, { align: 'right', width: 195 })
           .text('Greater South Avenue', 350, 88, { align: 'right', width: 195 })
           .text('New York 10001', 350, 101, { align: 'right', width: 195 })
           .text('U.S.A', 350, 114, { align: 'right', width: 195 });

        // Horizontal line separator
        doc.moveTo(50, 140)
           .lineTo(545, 140)
           .strokeColor('#CCCCCC')
           .stroke();

        // BILL INVOICE title (centered, no lines)
        const titleY = 160;
        const titleWidth = 495;

        doc.fontSize(24)
           .fillColor('#22c55e')
           .font('Helvetica-Bold')
           .text('BILL INVOICE', 50, titleY, { align: 'center', width: titleWidth })
           .fillColor('black')
           .font('Helvetica');

        // Bill To section (left side)
        doc.fontSize(12)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Bill To', 50, 210)
           .fontSize(12)
           .fillColor('#22c55e')
           .text(`${order.billingAddress.firstName} ${order.billingAddress.lastName}`, 50, 230)
           .fillColor('black')
           .fontSize(10)
           .font('Helvetica')
           .text(`${order.billingAddress.address}`, 50, 248)
           .text(`${order.billingAddress.city}`, 50, 263)
           .text(`${order.billingAddress.province} ${order.billingAddress.postalCode}`, 50, 278);

        // Ship To section
        doc.fontSize(12)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Ship To', 50, 320)
           .fontSize(10)
           .font('Helvetica')
           .text(`${order.billingAddress.address}`, 50, 340)
           .text(`${order.billingAddress.city}`, 50, 355)
           .text(`${order.billingAddress.province} ${order.billingAddress.postalCode}`, 50, 370);

        // Bill details table (top right)
        const detailsX = 355;
        const detailsY = 210;
        const cellWidth = 95;
        const cellHeight = 25;

        // Bill# row
        doc.rect(detailsX, detailsY, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .fontSize(10)
           .font('Helvetica-Bold')
           .text('Bill#', detailsX + 8, detailsY + 8);
        doc.fillColor('black')
           .font('Helvetica')
           .text(`BILL-${order.orderNumber}`, detailsX + cellWidth + 8, detailsY + 8);

        // Bill Date row
        doc.rect(detailsX, detailsY + cellHeight, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Bill Date', detailsX + 8, detailsY + cellHeight + 8);
        doc.fillColor('black')
           .font('Helvetica')
           .text(new Date(order.createdAt).toLocaleDateString('en-CA'), detailsX + cellWidth + 8, detailsY + cellHeight + 8);

        // Terms row
        doc.rect(detailsX, detailsY + cellWidth * 2, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight * 2, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Terms', detailsX + 8, detailsY + cellHeight * 2 + 8);
        doc.fillColor('black')
           .font('Helvetica')
           .text('Cash on Delivery', detailsX + cellWidth + 8, detailsY + cellHeight * 2 + 8);

        // Due Date row
        doc.rect(detailsX, detailsY + cellHeight * 3, cellWidth, cellHeight)
           .fillColor('#22c55e')
           .fill();
        doc.rect(detailsX + cellWidth, detailsY + cellHeight * 3, cellWidth, cellHeight)
           .fillColor('white')
           .fill()
           .strokeColor('#22c55e')
           .stroke();
        doc.fillColor('white')
           .font('Helvetica-Bold')
           .text('Due Date', detailsX + 8, detailsY + cellHeight * 3 + 8);
        doc.fillColor('black')
           .font('Helvetica')
           .text('On Delivery', detailsX + cellWidth + 8, detailsY + cellHeight * 3 + 8);

        // Items table (no gaps between header and rows)
        const tableTop = 420;
        const tableWidth = 495;
        
        // Table header with orange background
        doc.rect(50, tableTop, tableWidth, 35)
           .fillColor('#22c55e')
           .fill();
           
        doc.fillColor('white')
           .fontSize(11)
           .font('Helvetica-Bold')
           .text('#', 65, tableTop + 12)
           .text('Item & Description', 100, tableTop + 12)
           .text('Qty', 400, tableTop + 12, { width: 30, align: 'center' })
           .text('Rate', 440, tableTop + 12, { width: 40, align: 'center' })
           .text('Amount', 485, tableTop + 12, { width: 50, align: 'center' });

        // Table items with light gray background (no gaps between rows)
        let yPos = tableTop + 35;
        const rowHeight = 60;
        
        items.forEach((item, index) => {
          // Light gray background for all rows
          doc.rect(50, yPos, tableWidth, rowHeight)
             .fillColor('#F5F5F5')
             .fill();
          
          doc.fillColor('black')
             .fontSize(10)
             .font('Helvetica')
             .text((index + 1).toString(), 65, yPos + 15);
          
          // Item name (bold)
          const itemName = item.name.length > 25 ? item.name.substring(0, 22) + '...' : item.name;
          doc.fontSize(11)
             .fillColor('black')
             .font('Helvetica-Bold')
             .text(itemName, 100, yPos + 10, { width: 280 });
          
          // Item description/details
          const description = item.description || `${item.name} - Product details`;
          const shortDescription = description.length > 45 ? description.substring(0, 42) + '...' : description;
          doc.fontSize(9)
             .fillColor('#6B7280')
             .font('Helvetica')
             .text(shortDescription, 100, yPos + 25, { width: 280 });
          
          // Right aligned numbers with $ symbols
          doc.fillColor('black')
             .fontSize(10)
             .font('Helvetica')
             .text(item.quantity.toString(), 400, yPos + 20, { width: 30, align: 'center' })
             .text(`$${item.price.toFixed(2)}`, 440, yPos + 20, { width: 40, align: 'right' })
             .text(`$${(item.price * item.quantity).toFixed(2)}`, 485, yPos + 20, { width: 50, align: 'right' });
          
          yPos += rowHeight;
        });

        // Summary section
        const summaryTop = yPos + 30;
        const summaryX = 300;
        
        // Thank you message (bottom left)
        doc.fontSize(11)
           .fillColor('black')
           .font('Helvetica')
           .text('Thanks for your business.', 50, summaryTop);

        // QR Code positioned on left side above terms
        if (qrCodeBuffer) {
          doc.image(qrCodeBuffer, 50, summaryTop + 30, { width: 80 });
          doc.fontSize(7)
             .fillColor('#666666')
             .text('Scan to download', 50, summaryTop + 115, { width: 80, align: 'center' });
        }

        // Terms & Conditions (left side, below QR code)
        doc.fillColor('black')
           .fontSize(12)
           .font('Helvetica-Bold')
           .text('Terms & Conditions', 50, summaryTop + 140)
           .fontSize(9)
           .font('Helvetica')
           .text('All payments must be made in full before the', 50, summaryTop + 160)
           .text('commencement of any design work.', 50, summaryTop + 175);

        // Summary section (right aligned)
        doc.fontSize(11)
           .fillColor('black')
           .font('Helvetica')
           .text('Sub Total', summaryX, summaryTop)
           .text(`$${order.orderSummary.subtotal.toFixed(2)}`, summaryX + 130, summaryTop, { width: 65, align: 'right' });

        // Tax Rate
        const taxRate = order.orderSummary.taxRate || 5.00;
        doc.text(`Tax ${taxRate}%`, summaryX, summaryTop + 20)
           .text(`$${order.orderSummary.tax.toFixed(2)}`, summaryX + 130, summaryTop + 20, { width: 65, align: 'right' });

        // Line above Total
        doc.moveTo(summaryX, summaryTop + 35)
           .lineTo(summaryX + 195, summaryTop + 35)
           .strokeColor('#CCCCCC')
           .stroke();

        // Total
        doc.fontSize(14)
           .fillColor('black')
           .font('Helvetica-Bold')
           .text('Total', summaryX + 15, summaryTop + 50)
           .text(`$${order.orderSummary.total.toFixed(2)}`, summaryX + 90, summaryTop + 50, { width: 90, align: 'right' });

        // Balance Due with green background (changed to green as requested)
        doc.rect(summaryX, summaryTop + 75, 195, 35)
           .fillColor('#22c55e')
           .fill();
        doc.fillColor('white')
           .fontSize(12)
           .font('Helvetica-Bold')
           .text('Balance Due', summaryX + 15, summaryTop + 88)
           .text(`$${order.orderSummary.total.toFixed(2)}`, summaryX + 90, summaryTop + 88, { width: 90, align: 'right' });

        // NO BORDER around PDF (removed)

        doc.end();

      } catch (error) {
        reject(error);
      }
    });
  }

  // Legacy methods for file-based PDF generation
  static async generateOrderConfirmationPDF(order, items, outputPath) {
    return new Promise(async (resolve, reject) => {
      try {
        const buffer = await this.generateOrderConfirmationPDFBuffer(order, items);
        require('fs').writeFileSync(outputPath, buffer);
        resolve(outputPath);
      } catch (error) {
        reject(error);
      }
    });
  }

  static async generateInvoicePDF(order, items, outputPath) {
    return new Promise(async (resolve, reject) => {
      try {
        const buffer = await this.generateInvoicePDFBuffer(order, items);
        require('fs').writeFileSync(outputPath, buffer);
        resolve(outputPath);
      } catch (error) {
        reject(error);
      }
    });
  }

  static async generateBillPDF(order, items, outputPath) {
    return new Promise(async (resolve, reject) => {
      try {
        const buffer = await this.generateBillPDFBuffer(order, items);
        require('fs').writeFileSync(outputPath, buffer);
        resolve(outputPath);
      } catch (error) {
        reject(error);
      }
    });
  }
}

module.exports = PDFGeneratorService;